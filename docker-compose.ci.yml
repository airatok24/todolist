version: '3.8'

services:
  front:
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    depends_on:
      - api

  api:
    image: anevretdinov/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    depends_on:
      pg:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DB_HOST: pg

  bot:
    image: anevretdinov/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    depends_on:
      pg:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DB_HOST: pg
    command: python manage.py runbot
    networks:
      - backend_nw

  migrations:
    image: anevretdinov/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    depends_on:
      pg:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DB_HOST: pg
    command: >
      sh -c "python3 manage.py migrate"
  pg:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
    pgdata: